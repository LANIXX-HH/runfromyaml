name: Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run go fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files need formatting:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...

    - name: Build binary
      run: go build -v

    - name: Test binary execution
      run: |
        ./runfromyaml --help
        # Test with the test configuration file
        if [ -f "test_commands.yaml" ]; then
          ./runfromyaml --file test_commands.yaml --debug || true
        fi

  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.25.1

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run tests
      run: go test -v ./...

    - name: Build binary
      run: go build -v

    - name: Test binary execution
      run: |
        .\runfromyaml.exe --help

  test-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.25.1

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run tests
      run: go test -v ./...

    - name: Build binary
      run: go build -v

    - name: Test binary execution
      run: |
        ./runfromyaml --help

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.25.1

    - name: golangci-lint
      uses: golangci/golangci-lint-action@latest
      with:
        version: latest
        args: --timeout=5m
